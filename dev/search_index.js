var documenterSearchIndex = {"docs":
[{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"EditURL = \"https://github.com/felipecastrotc/BondGraph.jl/blob/main/examples/mechanical_duffing.jl\"","category":"page"},{"location":"examples/mechanical_duffing.html#msd-duffing","page":"Duffing Equation","title":"Duffing Equation","text":"","category":"section"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"The source files for all examples can be found in /examples.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"The Duffing equation is a nonlinear second-order ordinary differential equation commonly used to model various physical systems exhibiting nonlinear behavior, such as electrical circuits, mechanical systems, and biological systems. From the mechanical domain point of view, it is an extension of the simple mass-spring-damper system that incorporates a cubic spring. Despite its simple form, the Duffing equation exhibits chaotic behavior. The equation is given by:","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"mfracd^2 xdt^2 + cfracd xdt + kx + k_3x^3 = F(t)","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"where x represents the position, m is the mass, c is the damping coefficient, k is the spring stiffness, k_3 is the cubic spring stiffness, and F(t) denotes an external force applied to the system.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"In standard bond graphs, the compliance element is linear, while for the Duffing equation, we need a nonlinear compliance for the cubic spring. Therefore, we need to introduce a nonlinear compliance element to model the Duffing equation using the Bond Graph Toolkit. The library allows users to define custom elements and utilize the Power connector as interface.","category":"page"},{"location":"examples/mechanical_duffing.html#Bond-Graph-Toolkit","page":"Duffing Equation","title":"Bond Graph Toolkit","text":"","category":"section"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"First, we import the Bond Graph Toolkit module to model the system and the DifferentialEquations.jl package to solve the resulting ordinary differential equation (ODE). Additionally, we import the independent variable t from the Bond Graph Toolkit, which will be used to define a custom forcing term.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"using BondGraph\nusing BondGraph: t, D\nusing DifferentialEquations\nusing ModelingToolkit\nusing Plots\nusing Symbolics.Latexify","category":"page"},{"location":"examples/mechanical_duffing.html#Building-the-model","page":"Duffing Equation","title":"Building the model","text":"","category":"section"},{"location":"examples/mechanical_duffing.html#Custom-compliance","page":"Duffing Equation","title":"Custom compliance","text":"","category":"section"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"We now define a custom element called Spring3 to include the non-linearity of the Duffing equation. The element is defined by the function below.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"function Spring3(; name, k = 1.0, x = 0.0)\n    # Initialize the Power connector\n    @named power = Power()\n\n    # Initialize the displacement state with its initial value `x`\n    @variables q(t) = x\n    # Set the equation parameters\n    ps = @parameters C = 1 / k\n\n    # Define Spring3 element equations with the non-lineariyy of the cubic spring\n    eqs = [\n        power.e ~ q^3 / C\n        D(q) ~ power.f\n    ]\n\n    # Build the system with the equations, state and connector.\n    compose(ODESystem(eqs, t, [q], ps; name = name), power)\nend","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"The Spring3 function creates a bond graph subsystem representing the cubic spring. You can specify the following parameters:","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"name: The name of the Spring3 element (default: \"\").\nk: The cubic spring stiffness constant (default: 1.0).\nx: The initial displacement of the spring (default: 0.0).","category":"page"},{"location":"examples/mechanical_duffing.html#Setting-the-elements","page":"Duffing Equation","title":"Setting the elements","text":"","category":"section"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"Now we initialize and define the cubic spring custom element and the remaining single port elements of the system (mass, spring, and damper) as follows:","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"The parameters values","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"α = 1.0\nβ = 5.0\nδ = 0.02\nγ = 8.0\nω = 0.5","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"Define the elements","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"@named m = Mass(m = 1.0)\n@named s = Spring(k = α)\n@named s3 = Spring3(k = β)\n@named d = Damper(c = δ)","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"The forcing term can be set as an expression or even a Julia function. In this example, we will first intialize a generic forcing term that will be defined before solving the ODE.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"@parameters F(t)\n@named f = Se(F)","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"Then, we build the system by simply passing the one-port elements to the 1-junction function as arguments.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"@named mdl = Junction1(m, d, s, s3, [-1, f])","category":"page"},{"location":"examples/mechanical_duffing.html#Analysing-the-model","page":"Duffing Equation","title":"Analysing the model","text":"","category":"section"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"We can visualize the bond-graph connections by generating a graph plot of the model.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"generate_graph(mdl)","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"We can obtain the bond-graph equations using the code below.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"equations(expand_connections(mdl))","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"The equations of the model above were not simplified and represent the bond-graphs equations directly derived from the connections. Then, we simplify the DAE above and obtain the ODE. The simplified set of equations is required for using solve from DifferentialEquations.jl","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"@named sys = simplifysys(mdl)","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"Print system states","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"states(sys)","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"Print system parameters","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"parameters(sys)","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"Print the system simplified equations","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"equations(sys)","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"By comparison, we can see that the equations above are the same as the canonical form of the harmonic oscillator presented at the beginning.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"We can generate LaTeX code from the equations","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"latexify(equations(sys))","category":"page"},{"location":"examples/mechanical_duffing.html#Simulate-the-system","page":"Duffing Equation","title":"Simulate the system","text":"","category":"section"},{"location":"examples/mechanical_duffing.html#Unforced-case","page":"Duffing Equation","title":"Unforced case","text":"","category":"section"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"Now, we are going to consider only the unforced case. Therefore, F(t) = 0. Thus, we update the force function on the system.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"sys_unforced = substitute(sys, Dict(f.F => 0.0))","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"Define the simulation time","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"tspan = (0, 10)","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"When defining the ODEProblem as in the ModelingToolkit, we can define the initial value of the states.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"prob = ODEProblem(sys_unforced, [m.power.f => 0.0, s.q => 1.0, s3.q => 1.0], tspan)","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"Use the solve to simulate the system.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"sol = solve(prob)\nplot(sol, xlabel = \"Time\", ylabel = \"Amplitude\")","category":"page"},{"location":"examples/mechanical_duffing.html#Forced-case","page":"Duffing Equation","title":"Forced case","text":"","category":"section"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"Now, we are going to consider the forced case, where F(t) = sin(t). Thus, we update the force function on the system.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"sys_forced = substitute(sys, Dict(f.F => γ * cos(ω * t)))","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"Define the simulation time","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"tspan = (0, 10)","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"When defining the ODEProblem as in the ModelingToolkit we can define the initial value of the states.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"prob = ODEProblem(sys_forced, [m.power.f => 0.0, s.q => 0.0], tspan)","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"Use the solve to simulate the system.","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"sol = solve(prob)\nplot(sol, xlabel = \"Time\", ylabel = \"Amplitude\")","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"","category":"page"},{"location":"examples/mechanical_duffing.html","page":"Duffing Equation","title":"Duffing Equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"lib/internals.html#internal-documentation","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"lib/internals.html","page":"Internals","title":"Internals","text":"Documentation for BondGraph.jl's internal functions.","category":"page"},{"location":"lib/internals.html","page":"Internals","title":"Internals","text":"See the Public Documentation section of the manual covering the public functions.","category":"page"},{"location":"lib/internals.html#Contents","page":"Internals","title":"Contents","text":"","category":"section"},{"location":"lib/internals.html","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]\nDepth = 3","category":"page"},{"location":"lib/internals.html#Index","page":"Internals","title":"Index","text":"","category":"section"},{"location":"lib/internals.html","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]","category":"page"},{"location":"lib/internals.html#Internal-Interface","page":"Internals","title":"Internal Interface","text":"","category":"section"},{"location":"lib/internals.html#Bond-graph-utils","page":"Internals","title":"Bond graph utils","text":"","category":"section"},{"location":"lib/internals.html","page":"Internals","title":"Internals","text":"Modules = [BondGraph]\nPages = [\"./utils/bg_utils.jl\"]","category":"page"},{"location":"lib/internals.html#BondGraph.equalityeqs-Tuple{Any}","page":"Internals","title":"BondGraph.equalityeqs","text":"equalityeqs(con)\n\nCreate a list of equality equations from a given array of expressions.\n\nArguments:\n\ncon: Array of expressions.\n\nReturns:\n\nArray of equality equations.\n\nExample:\n\njulia> con = [a, b, c]\n\njulia> eqs = equalityeqs(con)\njulia> # eqs = [a ~ b, a ~ c]\n\njulia> con = [a]\n\njulia> eqs = equalityeqs(con)\njulia> # eqs = []\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#BondGraph.flatinput-Tuple{Any}","page":"Internals","title":"BondGraph.flatinput","text":"flatinput(ps)\n\nFlatten and process input systems and signs.\n\nArguments:\n\nps: Array of input systems or input vectors.\n\nReturns:\n\nTuple containing the flattened input systems and corresponding signs.\n\nExample:\n\njulia> ps = [sys1, [-1, sys2], sys3]\n\njulia> subsys, signs = flatinput(ps)\n# subsys = [sys1, sys2, sys3]\n# signs = [1, -1, 1]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#BondGraph.isindependent-Tuple{Num}","page":"Internals","title":"BondGraph.isindependent","text":"isindependent(var::Num)\n\nCheck if a variable is independent.\n\nArguments:\n\nvar::Num: The variable to check.\n\nReturns:\n\ntrue if the variable is independent.\nfalse if the variable is not independent.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#BondGraph.sumvar-Tuple{Any}","page":"Internals","title":"BondGraph.sumvar","text":"sumvar(con)\n\nCreate a sum variable equation from a given array of expressions.\n\nArguments:\n\ncon: Array of expressions.\n\nReturns:\n\nSum variable equation if the array is non-empty, otherwise an empty array.\n\nExample:\n\njulia>  con = [a, b, c]\n\njulia>  eq = sumvar(con)\n# eq = 0 ~ (a + b + c)\n\njulia> con = []\n\njulia> eq = sumvar(con)\n# eq = []\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#Connection-utils","page":"Internals","title":"Connection utils","text":"","category":"section"},{"location":"lib/internals.html","page":"Internals","title":"Internals","text":"Modules = [BondGraph]\nPages = [\"./utils/connection_utils.jl\"]","category":"page"},{"location":"lib/internals.html#BondGraph.add_idx-Tuple{Any, Any}","page":"Internals","title":"BondGraph.add_idx","text":"add_idx(var, idx)\n\nAdds an index to a variable by renaming it with the index appended to its name.\n\nArguments:\n\nvar: Variable to be indexed.\nidx: Index to be added to the variable name.\n\nReturns:\n\nIndexed variable with the index appended to its name.\n\nExample:\n\njulia> x = Variable(:x)\njulia> indexed_var = add_idx(x, 1)  # Renames \"x\" to \"x1\"\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#BondGraph.check_bg_con-Tuple{Any}","page":"Internals","title":"BondGraph.check_bg_con","text":"check_bg_con(connectionset)\n\nCheck if the connection set contains a bond-graph (bg) connection.\n\nArguments:\n\nconnectionset: ConnectionSet object.\n\nReturns:\n\nBoolean indicating whether the connection set contains a bond-graph connection.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#BondGraph.gen_tp_con!-Tuple{Any, Any, Any}","page":"Internals","title":"BondGraph.gen_tp_con!","text":"gen_tp_con!(eqs, sys, subsys)\n\nGenerates bond graph connections between a system and its sub-systems for the modulated gyrator and modulated transformer (two-port elements).\n\nArguments:\n\neqs: Array of equations to which the connections will be added.\nsys: The main system to which the connections will be made.\nsubsys: Sub-systems to be connected to the main system.\n\nReturns:\n\nNone\n\nExample:\n\njulia> eqs = Equation[]\njulia> sys = ODESystem([:x, :y], [dx, dy])\njulia> subsys = [ODESystem([:a], [da]), ODESystem([:b], [db])]\njulia> gen_tp_con!(eqs, sys, subsys)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#BondGraph.get_bg_connection_set!-Tuple{Any}","page":"Internals","title":"BondGraph.get_bg_connection_set!","text":"get_bg_connection_set!(connectionsets)\n\nExtracts the bond-graph (bg) connection sets from a list of connection sets.\n\nArguments:\n\nconnectionsets: Array of ConnectionSet objects.\n\nReturns:\n\nArray of ConnectionSet objects containing only the bond-graph connection sets.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#Graph-algorithm-utils","page":"Internals","title":"Graph algorithm utils","text":"","category":"section"},{"location":"lib/internals.html","page":"Internals","title":"Internals","text":"Modules = [BondGraph]\nPages = [\"./utils/graph.jl\"]","category":"page"},{"location":"lib/internals.html#BondGraph.csets2adjmtx-Tuple{Any, Any}","page":"Internals","title":"BondGraph.csets2adjmtx","text":"csets2adjmtx(csets, str2con; filterstr=\"f(t)\", filterflow=false)\n\nGenerates an adjacency matrix from connection sets and a dictionary.\n\nArguments:\n\ncsets: Array of connection sets.\nstr2con: Dictionary mapping connection set names to connection elements.\nfilterstr: String to filter connections by name (default: \"f(t)\").\nfilterflow: Boolean indicating whether to filter connections by flow (default: false).\n\nReturns:\n\nam: Adjacency matrix representing the connections between connection elements.\n\nExample:\n\njulia> csets = [ConnectionSet([:a], [:b]), ConnectionSet([:c], [:d])]\njulia> str2con = csets2dict(csets)\njulia> am = csets2adjmtx(csets, str2con)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#BondGraph.csets2dict-Tuple{Any}","page":"Internals","title":"BondGraph.csets2dict","text":"csets2dict(csets)\n\nConverts connection sets to a dictionary.\n\nArguments:\n\ncsets: Array of connection sets.\n\nReturns:\n\nstr2con: Dictionary mapping connection set names to connection elements.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#BondGraph.generate_bg_eqs!-Tuple{Any}","page":"Internals","title":"BondGraph.generate_bg_eqs!","text":"generate_bg_eqs!(connectionsets)\n\nGenerates bond graph equations from connection sets.\n\nArguments:\n\nconnectionsets: Array of connection sets.\n\nReturns:\n\neqs: Array of equations representing the bond graph.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#BondGraph.generate_graph","page":"Internals","title":"BondGraph.generate_graph","text":"generate_graph(mdl, var=:e; method=:stress)\n\nGenerates a graph visualization of the bond graph model.\n\nArguments:\n\nmdl: Bond graph model.\nvar: Variable to visualize connections for. Can be :e (effort) or :f (flow). Default is :e.\nmethod: Graph layout method. Default is :stress.\n\nExample:\n\njulia> generate_graph(mdl, var=:e, method=:stress)\n\n\n\n\n\n","category":"function"},{"location":"lib/internals.html#BondGraph.get_sm_mtx!-Tuple{Any, Any, Any}","page":"Internals","title":"BondGraph.get_sm_mtx!","text":"get_sm_mtx!(am, idx2k, str2con)\n\nGenerates the signal matrix by modifying the adjacency matrix.\n\nArguments:\n\nam: Adjacency matrix representing the connections between connection elements.\nidx2k: Dictionary mapping indices to connection element keys.\nstr2con: Dictionary mapping connection set names to connection elements.\n\nReturns:\n\nsm: Signal matrix representing the connections with modified entries.\n\nExample:\n\njulia> am = [0 1 0; 0 0 1; 0 0 0]\njulia> idx2k = Dict(1 => \"a\", 2 => \"b\", 3 => \"c\")\njulia> str2con = Dict(\"a\" => con1, \"b\" => con2, \"c\" => con3)\njulia> sm = get_sm_mtx!(am, idx2k, str2con)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#ODESystem-utils","page":"Internals","title":"ODESystem utils","text":"","category":"section"},{"location":"lib/internals.html","page":"Internals","title":"Internals","text":"Modules = [BondGraph]\nPages = [\"./utils/system_utils.jl\"]","category":"page"},{"location":"lib/internals.html#BondGraph.reducedobs-Tuple{ODESystem}","page":"Internals","title":"BondGraph.reducedobs","text":"reducedobs(sys::ODESystem; name)\n\nCreate a reduced ODESystem by substituting observed variables in the equations.\n\nArguments:\n\nsys::ODESystem: The original ODESystem object.\nname: Optional name for the reduced ODESystem.\n\nReturns:\n\nA reduced ODESystem object with observed variables substituted.\n\nExample:\n\njulia> sys = ODESystem([eq1, eq2], t)\njulia> reduced_sys = reducedobs(sys; name = \"Reduced System\")\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#BondGraph.simplifysys-Tuple{ODESystem}","page":"Internals","title":"BondGraph.simplifysys","text":"simplifysys(sys::ODESystem; name)\n\nSimplify an ODE system by expanding connections, performing structural simplification and reducing the observed variables.\n\nArguments:\n\nsys::ODESystem: The ODE system to simplify.\nname: Optional name for the simplified system.\n\nReturns:\n\nThe simplified ODE system.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#BondGraph.substitute_dict-Tuple{Any, Any, Any}","page":"Internals","title":"BondGraph.substitute_dict","text":"substitute_dict(O, expr, sub)\n\nSubstitute the variables in O with their corresponding values from the dictionary sub in the expression expr.\n\nArguments\n\nO: The variable or expression to be substituted.\nexpr: The expression in which the substitution should be performed.\nsub: A dictionary mapping variables to their corresponding values.\n\nReturns\n\nThe expression expr with the variables in O substituted using the values from sub.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals.html#BondGraph.substitute_observed-Tuple{Equation, ODESystem}","page":"Internals","title":"BondGraph.substitute_observed","text":"substitute_observed(eq::Equation, sys::ODESystem)\n\nSubstitute observed variables in the equation with their assigned values.\n\nArguments:\n\neq::Equation: The equation to be processed.\nsys::ODESystem: The ODESystem object containing the observed variables.\n\nReturns:\n\nAn equation with observed variables substituted by their assigned values.\n\nExample:\n\njulia> eq = @eq x'(t) = a * x(t) + b * y(t)\njulia> sys = ODESystem([eq], t)\njulia> substituted_eq = substitute_observed(eq, sys)\n\n\n\n\n\n","category":"method"},{"location":"contributing.html#contribute","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"TODO: Modify -> Inspired by COSMO.jl","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Contributions are always welcome:","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"If you want to contribute features, bug fixes, etc, please take a look at our Code Style Guide below\nPlease report any issues and bugs that you encounter in Issues\nAs an open source project we are also interested in any projects and applications that use COSMO. Please let us know via email to: michael.garstka[at]eng.ox.ac.uk","category":"page"},{"location":"contributing.html#Code-Style-Guide","page":"Contributing","title":"Code Style Guide","text":"","category":"section"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"The code in this repository follows the naming and style conventions of Julia Base with a few modifications. This style guide is heavily \"inspired\" by the guides of John Myles White and JuMP.","category":"page"},{"location":"contributing.html#Formatting","page":"Contributing","title":"Formatting","text":"","category":"section"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Use one tab when indenting a new block (except module)\nUse spaces between operators, except for ^, ', and :\nUse single space after commas and semicolons\nDon't use spaces around parentheses, or braces","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Bad: f(x,y) = [5*sin(x+y);y'] Good: f(x, y) = [5 * sin(x + y); y']","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Use spacing with keyword arguments","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Bad: foo(x::Integer=1) Good: foo(x::Integer = 1)","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Don't parenthesize conditions","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Bad: if (a == b) Good: if a == b","category":"page"},{"location":"contributing.html#Naming","page":"Contributing","title":"Naming","text":"","category":"section"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Modules and Type names use capitilization and camel case, e.g. module LinearAlgebra, struct ConvexSets.\nFunctions are lowercase and use underscores to seperate words, e.g. has_key(x), is_valid(y).\nNormal variables are lowercase and use underscores like functions, e.g. convex_set\nConstants are uppercase, e.g. const MY_CONSTANT\nAlways append ! to names of functions that modify their arguments.\nFunction arguments that are mutated come first. Otherwise follow the rules layed out in Julia Base Argument ordering\nFiles are named like functions, e.g. my_new_file.jl","category":"page"},{"location":"contributing.html#Syntax","page":"Contributing","title":"Syntax","text":"","category":"section"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Use 1.0 instead of 1.","category":"page"},{"location":"contributing.html#Git(hub)-specific-conventions","page":"Contributing","title":"Git(hub)-specific conventions","text":"","category":"section"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Branch names should be prepended with the initials of the creator and a forward slash, e.g. mg/newIdea instead of newIdea\nCommit messages should have the following format:","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"<#IssueId> Short (72 chars or less) summary\n\nMore detailed explanatory text. Wrap it to 72 characters. The blank\nline separating the summary from the body is critical.\n\nImperative style for the commit message: \"Fix bug\" and not \"Fixed\nbug\" or \"Fixes bug.\"\n\nThe issue id can be ommitted if the commit does not related to a specific open issue","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Pages = [\"contributing.md\"]\nDepth = 2","category":"page"},{"location":"lib/public.html#public-documentation","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"lib/public.html","page":"Public","title":"Public","text":"Documentation for BondGraph.jl's public interface.","category":"page"},{"location":"lib/public.html","page":"Public","title":"Public","text":"See the Internals section of the manual covering the internal functions.","category":"page"},{"location":"lib/public.html#Contents","page":"Public","title":"Contents","text":"","category":"section"},{"location":"lib/public.html","page":"Public","title":"Public","text":"Pages = [\"public.md\"]\nDepth = 3","category":"page"},{"location":"lib/public.html#Index","page":"Public","title":"Index","text":"","category":"section"},{"location":"lib/public.html","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public.html#Public-Interface","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"lib/public.html","page":"Public","title":"Public","text":"BondGraph","category":"page"},{"location":"lib/public.html#BondGraph","page":"Public","title":"BondGraph","text":"Main module for BongGraph.jl – a bond graph modeling toolkit based on ModelingToolkit.jl Julia package.\n\nExports\n\nPower\nSe\nSf\nDq\nJunction1\nJunction0\nmGY\nmTF\nMass\nSpring\nDamper\nreducedobs\nisindependent\ngenerate_graph\nsimplifysys\n\nImports\n\nBase\nCore\nDocStringExtensions\nDomainSets\nGraphRecipes\nModelingToolkit\nPlots\nReexport\n\nLicense\n\nThe LICENSE abbreviation can be used in the same way for the LICENSE.md file.\n\n\n\n\n\n","category":"module"},{"location":"lib/public.html#Bond-graph-elements","page":"Public","title":"Bond graph elements","text":"","category":"section"},{"location":"lib/public.html","page":"Public","title":"Public","text":"Se\nSf\nJunction1\nJunction0\nmGY\nmTF\nMass\nSpring\nDamper","category":"page"},{"location":"lib/public.html#BondGraph.Se","page":"Public","title":"BondGraph.Se","text":"Se(expr; name)\n\nCreates a source of effort element in the bond graph model. TODO: Improve\n\nArguments:\n\nexpr: Expression representing the source value.\nname: Name of the source element.\n\nReturns:\n\nAn ODESystem representing the source element.\n\nExample:\n\njulia> @named s1 = Se(2.0)\n\n\n\n\n\n","category":"function"},{"location":"lib/public.html#BondGraph.Sf","page":"Public","title":"BondGraph.Sf","text":"Sf(expr; name)\n\nCreates a source of flow in the bond graph model TODO: Improvess\n\nArguments:\n\nexpr: Expression representing the flow source value.\nname: Name of the flow source element.\n\nReturns:\n\nAn ODESystem representing the flow source element.\n\nExample:\n\njulia>  @named s2 = Sf(3.5)\n\n\n\n\n\n","category":"function"},{"location":"lib/public.html#BondGraph.Junction1","page":"Public","title":"BondGraph.Junction1","text":"Junction1(ps...; name=\"\", couple=true)\n\nCreate a one-junction element in the bond graph model.\n\nArguments\n\nps...: One or more elements to be connected to the one-junction.\nname::String: The name of the one-junction element (default: \"\").\n\nReturns\n\nAn ODESystem representing the one-junction element in the bond graph model.\n\nRemarks\n\nThe ps argument accepts one or more elements to be connected to the one-junction.\nThe function automatically determines the flow directions and subsystems based on the signs of the connections.\n\nExamples\n\n# Create a one-junction connecting multiple elements\njulia> junction = Junction1(damper1, damper2, spring1, spring2, name=\"junction\")\n\n\n\n\n\n","category":"function"},{"location":"lib/public.html#BondGraph.Junction0","page":"Public","title":"BondGraph.Junction0","text":"Junction0(ps...; name=\"\", couple=true)\n\nCreate a zero-junction element in the bond graph model.\n\nArguments\n\nps...: One or more elements to be connected to the zero-junction.\nname::String: The name of the zero-junction element (default: \"\").\n\nReturns\n\nAn ODESystem representing the zero-junction element in the bond graph model.\n\nRemarks\n\nThe ps argument accepts one or more elements to be connected to the zero-junction.\nThe function automatically determines the flow directions and subsystems based on the signs of the connections.\n\nExamples\n\n# Create a zero-junction connecting multiple elements\njulia> junction = Junction0(damper1, damper2, spring1, spring2, name=\"junction\")\n\n\n\n\n\n","category":"function"},{"location":"lib/public.html#BondGraph.mGY","page":"Public","title":"BondGraph.mGY","text":"mGY(subsys...; name=\"\", g=1.0, coneqs=[])\n\nCreate a gyrator element in the bond graph model.\n\nArguments\n\nsubsys...: One or more subsystems to be connected to the gyrator.\nname::String: The name of the gyrator element (default: \"\").\ng::Number|Symbol: A value or a expression representing the gyrator relationship (default: 1.0).\nconeqs::Vector{Equation}: Additional output connection equations of the modulated gyrator (default: []).\n\nReturns\n\nAn ODESystem representing the gyrator element in the bond graph model.\n\nExamples\n\n# Create a gyrator with a variable value\n@variables c\njulia> gyrator = mGY(subsys1, subsys2, g=c, name=\"gyrator\")\n\n\n\n\n\n","category":"function"},{"location":"lib/public.html#BondGraph.mTF","page":"Public","title":"BondGraph.mTF","text":"mTF(subsys...; name=\"\", r=1.0, coneqs=[])\n\nCreate a transformer element in the bond graph model.\n\nArguments\n\nsubsys...: One or more subsystems to be connected to the transformer.\nname::String: The name of the transformer element (default: \"\").\nr::Number|Symbol: A value or a expression representing the transformer relationship (default: 1.0).\nconeqs::Vector{Equation}: Additional output connection equations of the modulated gyrator (default: []).\n\nReturns\n\nAn ODESystem representing the transformer element in the bond graph model.\n\nExamples\n\n# Create a transformer with a variable value\n@variables c\njulia> transformer = mTF(subsys1, subsys2, g=c, name=\"transformer\")\n\n\n\n\n\n","category":"function"},{"location":"lib/public.html#BondGraph.Mass","page":"Public","title":"BondGraph.Mass","text":"Mass(; name=\"\", m=1.0, u=0.0)\n\nCreate a mass element in the bond graph model.\n\nArguments\n\nname::String: The name of the mass element (default: \"\").\nm::Float64: The mass value (default: 1.0).\nu::Float64: The initial value for the flow variable (default: 0.0).\n\nReturns\n\nAn ODESystem representing the mass element in the bond graph model.\n\nExamples\n\njulia> mass = Mass(name=\"my_mass\", m=2.0, u=1.0)\n\n\n\n\n\n","category":"function"},{"location":"lib/public.html#BondGraph.Spring","page":"Public","title":"BondGraph.Spring","text":"Spring(; name=\"\", k=10, x=0.0)\n\nCreate a spring element in the bond graph model.\n\nArguments\n\nname::String: The name of the spring element (default: \"\").\nk::Float64: The spring stiffness (default: 10).\nx::Float64: The initial displacement (default: 0.0).\n\nReturns\n\nAn ODESystem representing the spring element in the bond graph model.\n\nExamples\n\njulia> spring = Spring(name=\"my_spring\", k=5.0, x=0.1)\n\n\n\n\n\n","category":"function"},{"location":"lib/public.html#BondGraph.Damper","page":"Public","title":"BondGraph.Damper","text":"Damper(; name=\"\", c=10, u=1.0)\n\nCreate a damper element in the bond graph model.\n\nArguments\n\nname::String: The name of the damper element (default: \"\").\nc::Float64: The damping coefficient (default: 10).\nu::Float64: The initial flow variable value (default: 1.0).\n\nReturns\n\nAn ODESystem representing the damper element in the bond graph model.\n\nExamples\n\njulia> damper = Damper(name=\"my_damper\", c=5.0, u=0.1)\n\n\n\n\n\n","category":"function"},{"location":"lib/public.html#Utilities-function","page":"Public","title":"Utilities function","text":"","category":"section"},{"location":"lib/public.html","page":"Public","title":"Public","text":"generate_graph\nsimplifysys\nisindependent","category":"page"},{"location":"lib/public.html#BondGraph.generate_graph","page":"Public","title":"BondGraph.generate_graph","text":"generate_graph(mdl, var=:e; method=:stress)\n\nGenerates a graph visualization of the bond graph model.\n\nArguments:\n\nmdl: Bond graph model.\nvar: Variable to visualize connections for. Can be :e (effort) or :f (flow). Default is :e.\nmethod: Graph layout method. Default is :stress.\n\nExample:\n\njulia> generate_graph(mdl, var=:e, method=:stress)\n\n\n\n\n\n","category":"function"},{"location":"lib/public.html#BondGraph.simplifysys","page":"Public","title":"BondGraph.simplifysys","text":"simplifysys(sys::ODESystem; name)\n\nSimplify an ODE system by expanding connections, performing structural simplification and reducing the observed variables.\n\nArguments:\n\nsys::ODESystem: The ODE system to simplify.\nname: Optional name for the simplified system.\n\nReturns:\n\nThe simplified ODE system.\n\n\n\n\n\n","category":"function"},{"location":"lib/public.html#BondGraph.isindependent","page":"Public","title":"BondGraph.isindependent","text":"isindependent(var::Num)\n\nCheck if a variable is independent.\n\nArguments:\n\nvar::Num: The variable to check.\n\nReturns:\n\ntrue if the variable is independent.\nfalse if the variable is not independent.\n\n\n\n\n\n","category":"function"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"EditURL = \"https://github.com/felipecastrotc/BondGraph.jl/blob/main/examples/mechanical_msd_1dof.jl\"","category":"page"},{"location":"examples/mechanical_msd_1dof.html#msd-1dof","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"The source files for all examples can be found in /examples.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"The harmonic oscillator is a classic example of a dynamic system characterized by oscillatory behavior. In the mechanical domain, it can be represented as a mass-spring-damper system, as illustrated below:","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"(Image: Mass-Spring-Damper System)","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"The following differential equation governs the motion of the harmonic oscillator:","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"mfracd^2 xdt^2 + cfracd^2 xdt^2 + kx = F(t) \n\nwhere x","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"is the position, m is the mass, c is the damping coefficient, k is the spring stiffness, and F(t) is an external force applied to the system.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"To model the harmonic oscillator using the bond graph method, we can connect the inertance (I), compliance (C), and resistance (R) elements to a 1-junction, as depicted in the bond graph diagram:","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"(Image: Bond Graph Representation)","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"In this representation, the inertance element (I) corresponds to the mass (m) in the mechanical system, the compliance element (C) corresponds to the spring constant (k), and the resistance element (R) represents the damping coefficient (c).","category":"page"},{"location":"examples/mechanical_msd_1dof.html#Bond-graph-toolkit","page":"Harmonic Oscillator","title":"Bond-graph toolkit","text":"","category":"section"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"Firstly, we need to import the bond-graph toolkit module to model the system and the DifferentialEquations.jl to solve the resultant ODE. Also, we import the independent variable t from the bond-graph toolkit to define a custom forcing term.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"using BondGraph\nusing BondGraph: t, D\nusing DifferentialEquations\nusing ModelingToolkit\nusing Plots\nusing Symbolics.Latexify","category":"page"},{"location":"examples/mechanical_msd_1dof.html#Building-the-model","page":"Harmonic Oscillator","title":"Building the model","text":"","category":"section"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"Before defining a system, we need to define the single port elements of the system. Then, we define the mass, spring, and damper elements as follows:","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"@named m = Mass(m = 1.0);      # (kg)\n@named s = Spring(k = 1.0);    # (N/m)\n@named d = Damper(c = 1.0);    # (N⋅m⋅s)\nnothing #hide","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"The forcing term can be set as an expression or even a Julia function. In this example, we will first intialize a generic forcing term that will be defined before solving the ODE.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"@parameters F(t)\n@named f = Se(F)","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"Then, we build the system by simply passing the one-port elements to the 1-junction function as arguments.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"@named mdl = Junction1(m, d, s, [-1, f]);\nnothing #hide","category":"page"},{"location":"examples/mechanical_msd_1dof.html#Analysing-the-model","page":"Harmonic Oscillator","title":"Analysing the model","text":"","category":"section"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"We can visualize the bond-graph connections by generating a graph plot of the model.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"generate_graph(mdl)","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"We can obtain the bond-graph equations using the code below.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"equations(expand_connections(mdl))","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"The equations of the model above were not simplified and represent the bond-graphs equations directly derived from the connections. Then, we simplify the DAE above and obtain the ODE. The simplified set of equations is required for using solve from DifferentialEquations.jl","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"@named sys = simplifysys(mdl)","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"Print system states","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"states(sys)","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"Print system parameters","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"parameters(sys)","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"Print the system simplified equations","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"equations(sys)","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"By comparison, we can see that the equations above are the same as the canonical form of the harmonic oscillator presented at the beginning.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"We can generate LaTeX code from the equations","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"latexify(equations(sys))","category":"page"},{"location":"examples/mechanical_msd_1dof.html#Simulate-the-system","page":"Harmonic Oscillator","title":"Simulate the system","text":"","category":"section"},{"location":"examples/mechanical_msd_1dof.html#Unforced-case","page":"Harmonic Oscillator","title":"Unforced case","text":"","category":"section"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"Now, we are going to consider only the unforced case. Therefore, F(t) = 0. Thus, we update the force function on the system.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"sys_unforced = substitute(sys, Dict(f.F => 0.0))","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"Define the simulation time","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"tspan = (0, 10)","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"When defining the ODEProblem as in the ModelingToolkit, we can define the initial value of the states.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"prob = ODEProblem(sys_unforced, [m.power.f => 0.0, s.q => 1.0], tspan)","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"Use the solve to simulate the system.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"sol = solve(prob)\nplot(sol, xlabel = \"Time\", ylabel = \"Amplitude\")","category":"page"},{"location":"examples/mechanical_msd_1dof.html#Forced-case","page":"Harmonic Oscillator","title":"Forced case","text":"","category":"section"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"Now, we are going to consider the forced case, where F(t) = sin(t). Thus, we update the force function on the system.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"sys_forced = substitute(sys, Dict(f.F => sin(t)))","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"Define the simulation time","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"tspan = (0, 10)","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"When defining the ODEProblem as in the ModelingToolkit we can define the initial value of the states.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"prob = ODEProblem(sys_forced, [m.power.f => 0.0, s.q => 0.0], tspan)","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"Use the solve to simulate the system.","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"sol = solve(prob)\nplot(sol, xlabel = \"Time\", ylabel = \"Amplitude\")","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"","category":"page"},{"location":"examples/mechanical_msd_1dof.html","page":"Harmonic Oscillator","title":"Harmonic Oscillator","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"EditURL = \"https://github.com/felipecastrotc/BondGraph.jl/blob/main/examples/mechanical_msd_2dof.jl\"","category":"page"},{"location":"examples/mechanical_msd_2dof.html#msd-2dof","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"","category":"section"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"The source files for all examples can be found in /examples.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"A more challenging yet simple dynamic system than the harmonic oscillator is the two degrees of freedom mass-spring-damper system, as illustrated below:","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"(Image: Mass-Spring-Damper System)","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"The following differential equation governs the motion of the harmonic oscillator:","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"TODO: update the equation mfracd^2 xdt^2 + cfracd^2 xdt^2 + kx = F(t),","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"where x is the position, m is the mass, c is the damping coefficient, k is the spring stiffness, and F(t) is an external force applied to the system.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"To model the 2-DoF system using the bond graph method, we need to connect the inertance (I), compliance (C), and resistance (R) elements to different 1-junctions and 0-junctions, as depicted in the bond graph diagram:","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"(Image: Bond Graph Representation)","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"In this representation, the inertance element (I) corresponds to the mass (m) in the mechanical system, the compliance element (C) corresponds to the spring constant (k), and the resistance element (R) represents the damping coefficient (c). They were considered, for simplicity, equal for both degrees of freedom.","category":"page"},{"location":"examples/mechanical_msd_2dof.html#Bond-graph-toolkit","page":"MSD with 2-DoF","title":"Bond-graph toolkit","text":"","category":"section"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Firstly, we need to import the bond-graph toolkit module to model the system and the DifferentialEquations.jl to solve the resultant ODE. Also, we import the independent variable t from the bond-graph toolkit for defining a custom forcing term.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"using BondGraph\nusing BondGraph: t, D\nusing DifferentialEquations\nusing ModelingToolkit\nusing Plots\nusing Symbolics.Latexify","category":"page"},{"location":"examples/mechanical_msd_2dof.html#Building-the-model","page":"MSD with 2-DoF","title":"Building the model","text":"","category":"section"},{"location":"examples/mechanical_msd_2dof.html#Setting-the-elements","page":"MSD with 2-DoF","title":"Setting the elements","text":"","category":"section"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Before defining a system, we need to define the single port elements of the system. Then, we define the mass, spring, and damper elements as follows:","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"@named m = Mass(m=1.0);      # (kg)\n@named s = Spring(k=1.0);    # (N/m)\n@named d = Damper(c=1.0);    # (N⋅m⋅s)\nnothing #hide","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"The forcing term can be set as an expression or even a Julia function. In this example, we will first intialize a generic forcing term that will be defined before solving the ODE.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"@parameters F(t)\n@named f = Se(F)","category":"page"},{"location":"examples/mechanical_msd_2dof.html#Setting-the-junctions-and-subsystems","page":"MSD with 2-DoF","title":"Setting the junctions and subsystems","text":"","category":"section"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Differently from the 1-DoF, where we could define the entire system with only a 1-junction. For the 2-DoF system we are required to define multiple 1-junctions and one 0-junction. Thus, we define them separately and later we will connect them accordingly.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Firstly we define the ground connected mass (m_1).","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"@named m1_j1 = Junction1([-1, m], [-1, d], [-1, s])","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Then, we define the 2^nd DoF mass ((m_2)) with two 1-junctions and one 0-junction.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"@named m2_j1 = Junction1([-1, m], f)\n@named m2_j0 = Junction0()\n@named m2_sd = Junction1([-1, s], [-1, d])","category":"page"},{"location":"examples/mechanical_msd_2dof.html#Connect-the-subsystems","page":"MSD with 2-DoF","title":"Connect the subsystems","text":"","category":"section"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Define the connections between the junctions.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"cons = [\n    connect(m2_j0.power, m2_j1.power),\n    connect(m2_j0.power, m2_sd.power),\n    connect(m1_j1.power, m2_j0.power),\n]","category":"page"},{"location":"examples/mechanical_msd_2dof.html#Build-the-system","page":"MSD with 2-DoF","title":"Build the system","text":"","category":"section"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"We build the system by first creating a ODESystem with junctions connections and setting the independent variable as t.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"@named mdl = ODESystem(cons, t)","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Then, we need to add the junctions subsystems to the model","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"mdl = compose(mdl, m1_j1, m2_j0, m2_j1, m2_sd)","category":"page"},{"location":"examples/mechanical_msd_2dof.html#Analysing-the-model","page":"MSD with 2-DoF","title":"Analysing the model","text":"","category":"section"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"We can visualize the bond-graph connections by generating a graph plot of the model.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"generate_graph(mdl)","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"We can obtain the bond-graph equations using the code below.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"equations(expand_connections(mdl))","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"The equations of the model above were not simplified and represent the bond-graphs equations directly derived from the connections. Then, we simplify the DAE above and obtain the ODE. The simplified set of equations is required for using solve from DifferentialEquations.jl","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"@named sys = simplifysys(mdl)","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Print system states","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"states(sys)","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Print system parameters","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"parameters(sys)","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Print the system simplified equations","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"equations(sys)","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"By comparison, we can see that the equations above are the same as the canonical form of the harmonic oscillator presented at the beginning.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"We can generate LaTeX code from the equations","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"latexify(equations(sys))","category":"page"},{"location":"examples/mechanical_msd_2dof.html#Simulate-the-system","page":"MSD with 2-DoF","title":"Simulate the system","text":"","category":"section"},{"location":"examples/mechanical_msd_2dof.html#Unforced-case","page":"MSD with 2-DoF","title":"Unforced case","text":"","category":"section"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Now, we are going to consider only the unforced case. Therefore, F(t) = 0. Thus, we update the force function on the system.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"sys_unforced = substitute(sys, Dict(m2_j1.f.F => 0.0))","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Define the simulation time","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"tspan = (0, 10)","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"When defining the ODEProblem as in the ModelingToolkit, we can set the initial value of the states.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"prob = ODEProblem(sys_unforced, [m2_j1.m.power.f => 0.0, m2_sd.s.q => 1.0], tspan)","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Use the solve to simulate the system.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"sol = solve(prob)\nplot(sol, xlabel=\"Time\", ylabel=\"Amplitude\")","category":"page"},{"location":"examples/mechanical_msd_2dof.html#Forced-case","page":"MSD with 2-DoF","title":"Forced case","text":"","category":"section"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Now, we are going to consider the forced case, where F(t) = sin(t). Thus, we update the force function on the system.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"sys_forced = substitute(sys, Dict(m2_j1.f.F => sin(t)))","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Define the simulation time","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"tspan = (0, 10)","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"When defining the ODEProblem as in the ModelingToolkit we can define the initial value of the states.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"prob = ODEProblem(sys_forced, [m2_j1.m.power.f => 0.0, m2_sd.s.q => 0.0], tspan)","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"Use the solve to simulate the system.","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"sol = solve(prob)\nplot(sol, xlabel=\"Time\", ylabel=\"Amplitude\")","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"","category":"page"},{"location":"examples/mechanical_msd_2dof.html","page":"MSD with 2-DoF","title":"MSD with 2-DoF","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"EditURL = \"https://github.com/felipecastrotc/BondGraph.jl/blob/main/examples/electrical_rc.jl\"","category":"page"},{"location":"examples/electrical_rc.html#rc-circuit","page":"-","title":"Quick Example","text":"","category":"section"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"The source files for all examples can be found in /examples.","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"Let's explore the capabilities of the library through a quick example of modeling a basic dynamic system, an RC circuit. The RC circuit is a fundamental electrical circuit consisting of a resistor (R) and a capacitor (C), as depicted in the figure below:","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"(Image: RC Circuit)","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"By using the Kirchhoff's law we have the following linear differential equation that describes the charge on the capacitor along the time.","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"C fracdVdt + fracVR = 0","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"To model the RC circuit using the bond graph method, we can connect the compliance (C) and resistance (R) elements to a zero-junction, as shown in the bond graph diagram:","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"(Image: Bond Graph Representation)","category":"page"},{"location":"examples/electrical_rc.html#Bond-Graph-Toolkit","page":"-","title":"Bond Graph Toolkit","text":"","category":"section"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"We can use the Bond Graph Toolkit to model and get the RC circuit equations and then solve the system, as presented in the code below.","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"# Import the required libraries\nusing BondGraph\nusing DifferentialEquations\nusing Plots\n\n# Define the elements of the RC circuit\n@named C = Spring(k=1 / 1.0)   # Electric capacitance (F)\n@named R = Damper(c=1.0)       # Electric resistance (Ohm)\n\n# Create the RC circuit model by connecting the elements\n@named model = Junction0(R, C)\n# Simplify the system equations\n@named sys = simplifysys(model)\n\n# Set the time span for simulation\ntspan = (0, 10)\n# Define the initial conditions\ninitial_conditions = [R.power.f => 0.0, C.q => 1.0]\n\n# Define the ODE problem\nprob = ODEProblem(sys, initial_conditions, tspan)\n# Solve the ODE problem\nsol = solve(prob)\n# Plot the results\nplot(sol, xlabel=\"Time\", ylabel=\"Amplitude\")","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"Moreover, we can generate the bond graph diagram of the model using the generate_graph function.","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"generate_graph(model)","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"Print the system states","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"states(sys)","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"Print the system parameters","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"parameters(sys)","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"Print the simplified equations of the system","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"equations(sys)","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"In the code snippets, we start by importing the libraries BondGraph, DifferentialEquations, and Plots. Then, ee define the elements of the RC circuit, namely the compliance C and the resistance R, using the functions Spring and Damper from the BondGraphToolkit package.","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"Next, we create the RC circuit model by connecting the elements R and C to a zero-junction using the Junction0 function. We use the simplifysys function to obtain a more concise representation of the system, which is stored in the variable sys.","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"To simulate the system, We first define the time span for the simulation using the tuple (0, 10). Then, we specify the initial conditions of the system in the initial_conditions dictionary, where we set the initial charge on the capacitor C to 10 and the initial flow through the resistor R to 00.","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"Using the ODEProblem function from DifferentialEquations, we define the ODE problem to be solved by passing the system sys, the initial conditions, and the time span. We solve the ODE problem using the solve function.","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"Finally, we visualize the results by plotting the solution (sol) using the plot function from Plots. The x-axis represents time, and the y-axis represents the amplitude of the variables in the system.","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"","category":"page"},{"location":"examples/electrical_rc.html","page":"-","title":"-","text":"This page was generated using Literate.jl.","category":"page"},{"location":"getting_started_auto.html#Getting-Started","page":"Getting started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"This section will guide you through the steps required to install the library and provide a simple example to help you get started.","category":"page"},{"location":"getting_started_auto.html#install-guide","page":"Getting started","title":"Installation","text":"","category":"section"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"To use the Bond Graph Toolkit, you need to have Julia installed on your system. If you haven't installed Julia yet, follow the official Julia documentation for instructions specific to your operating system or go directly to the Julia Download page.","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"Once Julia is installed, you can proceed with installing the Bond Graph toolkit by following these steps:","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"Launch Julia by opening the Julia REPL or the Julia command-line interface.\nEnter the package manager by pressing the ] key. You should see the prompt change to pkg>.\nInside the package manager, type the following command to add the library:\npkg> add BondGraphToolkit.jl\nWait for Julia to download and install the library and its dependencies. This process may take a few moments depending on your internet connection and system performance.\nOnce the installation is complete, you can exit the package manager by pressing the backspace key or by typing Ctrl+C.","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"Congratulations! You have successfully installed the library and are ready to start using it.","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"TODO: add instalation latest version","category":"page"},{"location":"getting_started_auto.html#rc-circuit","page":"Getting started","title":"Quick Example","text":"","category":"section"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"The source files for all examples can be found in /examples.","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"Let's explore the capabilities of the library through a quick example of modeling a basic dynamic system, an RC circuit. The RC circuit is a fundamental electrical circuit consisting of a resistor (R) and a capacitor (C), as depicted in the figure below:","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"(Image: RC Circuit)","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"By using the Kirchhoff's law we have the following linear differential equation that describes the charge on the capacitor along the time.","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"C fracdVdt + fracVR = 0","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"To model the RC circuit using the bond graph method, we can connect the compliance (C) and resistance (R) elements to a zero-junction, as shown in the bond graph diagram:","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"(Image: Bond Graph Representation)","category":"page"},{"location":"getting_started_auto.html#Bond-Graph-Toolkit","page":"Getting started","title":"Bond Graph Toolkit","text":"","category":"section"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"We can use the Bond Graph Toolkit to model and get the RC circuit equations and then solve the system, as presented in the code below.","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"# Import the required libraries\nusing BondGraph\nusing DifferentialEquations\nusing Plots\n\n# Define the elements of the RC circuit\n@named C = Spring(k=1 / 1.0)   # Electric capacitance (F)\n@named R = Damper(c=1.0)       # Electric resistance (Ohm)\n\n# Create the RC circuit model by connecting the elements\n@named model = Junction0(R, C)\n# Simplify the system equations\n@named sys = simplifysys(model)\n\n# Set the time span for simulation\ntspan = (0, 10)\n# Define the initial conditions\ninitial_conditions = [R.power.f => 0.0, C.q => 1.0]\n\n# Define the ODE problem\nprob = ODEProblem(sys, initial_conditions, tspan)\n# Solve the ODE problem\nsol = solve(prob)\n# Plot the results\nplot(sol, xlabel=\"Time\", ylabel=\"Amplitude\")","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"Moreover, we can generate the bond graph diagram of the model using the generate_graph function.","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"generate_graph(model)","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"Print the system states","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"states(sys)","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"Print the system parameters","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"parameters(sys)","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"Print the simplified equations of the system","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"equations(sys)","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"In the code snippets, we start by importing the libraries BondGraph, DifferentialEquations, and Plots. Then, ee define the elements of the RC circuit, namely the compliance C and the resistance R, using the functions Spring and Damper from the BondGraphToolkit package.","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"Next, we create the RC circuit model by connecting the elements R and C to a zero-junction using the Junction0 function. We use the simplifysys function to obtain a more concise representation of the system, which is stored in the variable sys.","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"To simulate the system, We first define the time span for the simulation using the tuple (0, 10). Then, we specify the initial conditions of the system in the initial_conditions dictionary, where we set the initial charge on the capacitor C to 10 and the initial flow through the resistor R to 00.","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"Using the ODEProblem function from DifferentialEquations, we define the ODE problem to be solved by passing the system sys, the initial conditions, and the time span. We solve the ODE problem using the solve function.","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"Finally, we visualize the results by plotting the solution (sol) using the plot function from Plots. The x-axis represents time, and the y-axis represents the amplitude of the variables in the system.","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"","category":"page"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"This section was generated using Literate.jl.","category":"page"},{"location":"getting_started_auto.html#Index","page":"Getting started","title":"Index","text":"","category":"section"},{"location":"getting_started_auto.html","page":"Getting started","title":"Getting started","text":"Pages = [\"getting_started.md\"]\nDepth = 2","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"EditURL = \"https://github.com/felipecastrotc/BondGraph.jl/blob/main/examples/mechanical_msd_ndof.jl\"","category":"page"},{"location":"examples/mechanical_msd_ndof.html#msd-ndof","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"","category":"section"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"The source files for all examples can be found in /examples.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"One of the advantages of using a scripting approach to model dynamic systems is the ability to create and simulate the system algorithmically. To showcase this capability using the Bond Graph Toolkit, let us consider an example of a mass-spring-damper (MSD) system with n degrees of freedom. We will use a for loop to vary the number of masses. The n-degree-of-freedom (n-DoF) MSD system is depicted below:","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"TODO: Update the image (Image: Mass-Spring-Damper System)","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"The following differential equation governs the motion of this n-DoF harmonic oscillator:","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"TODO: Update the equation mfracd^2 xdt^2 + cfracd^2 xdt^2 + kx = F(t),","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"where x_n is the position, m_n is the mass, c_n is the damping coefficient, k_n is the spring stiffness, and F(t) is an external force applied to the system.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"To model the n-DoF system using the bond graph method, we need to connect inertance (I), compliance (C), and resistance (R) elements to different 1-junctions and 0-junctions, as shown in the bond graph diagram:","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"TODO: Generate the bond graph for the n-DoF system (Image: Bond Graph Representation)","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"In this representation, the inertance element (I) corresponds to the mass (m) in the mechanical system, the compliance element (C) corresponds to the spring constant (k), and the resistance element (R) represents the damping coefficient (c). For simplicity, we assume they are equal for both degrees of freedom.","category":"page"},{"location":"examples/mechanical_msd_ndof.html#Bond-Graph-Toolkit","page":"MSD system with N-DoF","title":"Bond Graph Toolkit","text":"","category":"section"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"We need to import the Bond Graph Toolkit module and the DifferentialEquations.jl package to model the system and solve the resultant ODE. Additionally, we will import the independent variable t from the Bond Graph Toolkit for defining a custom forcing term.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"using BondGraph\nusing BondGraph: t, D\nusing DifferentialEquations\nusing ModelingToolkit\nusing Plots\nusing Symbolics.Latexify","category":"page"},{"location":"examples/mechanical_msd_ndof.html#Building-the-model","page":"MSD system with N-DoF","title":"Building the model","text":"","category":"section"},{"location":"examples/mechanical_msd_ndof.html#Setting-the-elements","page":"MSD system with N-DoF","title":"Setting the elements","text":"","category":"section"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"Before defining a system, we need to define the single port elements of the system. Then, we define the mass, spring, and damper elements as follows:","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"@named m = Mass(m = 1.0)      # (kg)\n@named s = Spring(k = 1.0)    # (N/m)\n@named d = Damper(c = 1.0)    # (N⋅m⋅s)","category":"page"},{"location":"examples/mechanical_msd_ndof.html#Setting-the-junctions-and-subsystems","page":"MSD system with N-DoF","title":"Setting the junctions and subsystems","text":"","category":"section"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"Similarly to the 2-DoF example, in the n-DoF system, we need to define multiple 1-junctions and 0-junctions. To simplify the process, we can define them separately and later connect them accordingly. In the bond graph model of the n-DoF system, there is a section that repeats across the model, a spring, damper, and one-junction. To avoid redundancy, we can create this section as a subsystem and reuse it in other parts of the system where it is needed.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"Firstly we define the ground-connected mass (m_1) as a subsystem.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"@named m1 = Junction1([-1, m], [-1, d], [-1, s])","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"Then, we create the n-DoF spring and damper subsystem.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"@named sd = Junction1([-1, s], [-1, d])","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"Set the number of degrees of freedom. For this case, it should be greater or equal to 3.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"n = 4","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"Then, we build the model using a for loop. The subsystems are stored inside the Matrix of subsystems (M), while the connections between the subsystems are stored inside the Vector of connections (cons).","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"M, cons = [], []\nfor i = 2:n\n    # Generate the subsystems of one DoF\n    j0 = Junction0(sd; name = Symbol(\"m\" * string(i) * \"_j0\"))\n    j1 = Junction1([-1, m]; name = Symbol(\"m\" * string(i) * \"_j1\"))\n    push!(M, [j0, j1])\n    # Connect the subsystems of one DoF\n    push!(cons, connect(j0.power, j1.power))\nend","category":"page"},{"location":"examples/mechanical_msd_ndof.html#Connect-the-subsystems","page":"MSD system with N-DoF","title":"Connect the subsystems","text":"","category":"section"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"We need now to iterate over the subsystem connecting them.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"push!(cons, [connect(M[i][2].power, M[i+1][1].power) for i = 1:(length(M)-1)]...)","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"Finally, we need to connect the ground-connected mass (m_1) to the second subsystem.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"push!(cons, connect(m1.power, M[1][1].power))","category":"page"},{"location":"examples/mechanical_msd_ndof.html#Build-the-system","page":"MSD system with N-DoF","title":"Build the system","text":"","category":"section"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"We flatten the subsystem Matrix into a Vector for simplicity.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"M_flat = vcat(M...);\nnothing #hide","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"We build the system by creating an ODESystem with the connections and setting the independent variable as t.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"@named mdl = ODESystem(cons, t)","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"Then, we need to add the subsystems to the model.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"mdl = compose(mdl, m1, M_flat...)","category":"page"},{"location":"examples/mechanical_msd_ndof.html#Analysing-the-model","page":"MSD system with N-DoF","title":"Analysing the model","text":"","category":"section"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"We can visualize the bond-graph connections by generating a graph plot of the model.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"generate_graph(mdl)","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"We can obtain the bond-graph equations using the code below.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"equations(expand_connections(mdl))","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"The model's equations above were not simplified and represented the bond-graphs equations directly derived from the connections. Then, we simplify the DAE above and obtain the ODE. The simplified set of equations is required for using solve from DifferentialEquations.jl.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"@named sys = simplifysys(mdl);\nnothing #hide","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"Print system states.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"states(sys)","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"Print system parameters.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"parameters(sys)","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"Print the system's simplified equations.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"equations(sys)","category":"page"},{"location":"examples/mechanical_msd_ndof.html#Simulate-the-system","page":"MSD system with N-DoF","title":"Simulate the system","text":"","category":"section"},{"location":"examples/mechanical_msd_ndof.html#Unforced-case","page":"MSD system with N-DoF","title":"Unforced case","text":"","category":"section"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"In this case, we will consider an initial displacement of 10 (m) on the second mass of the system.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"Define the simulation time.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"tspan = (0, 10)","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"When defining the ODEProblem as in the ModelingToolkit, we can define the initial value of the states.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"prob = ODEProblem(sys, [M[1][2].m.power.f => 0.0, M[1][1].sd.s.q => 1.0], tspan)","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"Use the solve to simulate the system.","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"sol = solve(prob)\nplot(sol, xlabel=\"Time\", ylabel=\"Amplitude\")","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"","category":"page"},{"location":"examples/mechanical_msd_ndof.html","page":"MSD system with N-DoF","title":"MSD system with N-DoF","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/user_guide.html#Modeling","page":"Modeling","title":"Modeling","text":"","category":"section"},{"location":"man/user_guide.html","page":"Modeling","title":"Modeling","text":"This section introduces the general concepts and techniques for modeling bond graph systems using the Bond Graph Toolkit. It describes the general aspect of the library and how it is organized the basic elements, such as inertance, compliance, resistance, and junctions, and explains how to connect these elements to build complex system models.","category":"page"},{"location":"man/user_guide.html#General","page":"Modeling","title":"General","text":"","category":"section"},{"location":"man/user_guide.html","page":"Modeling","title":"Modeling","text":"The ","category":"page"},{"location":"man/user_guide.html#Implicit","page":"Modeling","title":"Implicit","text":"","category":"section"},{"location":"man/user_guide.html#Explicit","page":"Modeling","title":"Explicit","text":"","category":"section"},{"location":"man/user_guide.html#Substituting","page":"Modeling","title":"Substituting","text":"","category":"section"},{"location":"man/user_guide.html#Forcing-term","page":"Modeling","title":"Forcing term","text":"","category":"section"},{"location":"man/user_guide.html#Modulated-GY-and-TF","page":"Modeling","title":"Modulated GY and TF","text":"","category":"section"},{"location":"man/user_guide.html#Expression-in-the-compliance-and-Resistance","page":"Modeling","title":"Expression in the compliance and Resistance","text":"","category":"section"},{"location":"man/user_guide.html#Visualization","page":"Modeling","title":"Visualization","text":"","category":"section"},{"location":"man/user_guide.html#Custom-elements","page":"Modeling","title":"Custom elements","text":"","category":"section"},{"location":"man/user_guide.html#Power-conector","page":"Modeling","title":"Power conector","text":"","category":"section"},{"location":"man/user_guide.html#Scripting","page":"Modeling","title":"Scripting","text":"","category":"section"},{"location":"man/user_guide.html#Modularity","page":"Modeling","title":"Modularity","text":"","category":"section"},{"location":"license.html#License","page":"License","title":"License","text":"","category":"section"},{"location":"license.html","page":"License","title":"License","text":"The BondGraphToolkit is distributed under the Apache 2.0 License. This means that you are free to use, modify, and distribute the library, both commercially and non-commercially, under certain conditions. Please read the following terms and conditions of the Apache License 2.0:","category":"page"},{"location":"license.html","page":"License","title":"License","text":"Copyright 2023 Felipe de Castro Teixeira Carvalho\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","category":"page"},{"location":"license.html","page":"License","title":"License","text":"TODO:update the license path","category":"page"},{"location":"license.html","page":"License","title":"License","text":"To view the complete license text, please refer to the LICENSE file located in the root directory of this project.","category":"page"},{"location":"license.html","page":"License","title":"License","text":"By using the BondGraphToolkit, you agree to the terms and conditions of the Apache License 2.0.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"EditURL = \"https://github.com/felipecastrotc/BondGraph.jl/blob/main/examples/electrical_dc_motor.jl\"","category":"page"},{"location":"examples/electrical_dc_motor.html#dc-motor","page":"DC Motor","title":"DC Motor","text":"","category":"section"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"The source files for all examples can be found in /examples.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"The DC motor is a commonly used actuator that provides rotary motion to a mechanical system. It converts electrical energy into rotational mechanical energy. Thus, modeling it with a bond graph requires an additional port to the zero and one junctions. The system can be represented as an equivalent circuit of the armature and the free-body diagram of the rotor illustrated below:","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"(Image: DC motor)","category":"page"},{"location":"examples/electrical_dc_motor.html#DC-Motor-model","page":"DC Motor","title":"DC Motor model","text":"","category":"section"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"We assumed that the rotor and shaft are rigid to model the DC motor coupled with a shaft. We also considered the shaft friction proportional to its angular velocity, representing a viscous friction model.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"The torque generated by a DC motor is typically proportional to the armature current (i) and the strength of the magnetic field. However, we will assume a constant magnetic field for simplicity, resulting in the motor torque being proportional to the armature current. We represent this relationship using a constant factor k_tau, which gives us the following equation:","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"tau = k_tau i","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"The back electromotive force generated by the motor torque is proportional to the angular velocity of the shaft (dottheta) through a constant factor k_e:","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"e = k_e dottheta","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"The motor torque constant (k_tau) and the back electromotive force (k_e) are equal, denoted as k.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Finally, based on Newton's 2nd law and Kirchhoff's voltage law, we can derive the following governing equations for the system:","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Jddottheta + cdottheta = ki ","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Lfracdidt + Ri = V - kdottheta","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"where J represents the moment of inertia of the rotor, c is the viscous friction coefficient, L and R are the armature inductance and resistance, respectively. By solving these equations, we can analyze the dynamic behavior of the DC motor and shaft system.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"See also DC Motor Speed: System Modeling","category":"page"},{"location":"examples/electrical_dc_motor.html#Bond-Graph-Model","page":"DC Motor","title":"Bond Graph Model","text":"","category":"section"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"To model the DC motor depicted in the figure above, we can use the bond graph approach and represent the system with the following bond graph:","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"TODO: update the bond graph (Image: Bond Graph Representation)","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"In this representation, the inertance elements (I) correspond to the moment of inertia of the rotor (J) in the mechanical domain and the armature inductance (L) in the electrical domain. The resistance elements (R) represent the viscous friction coefficient (c) in the mechanical domain and the armature electrical resistance (R_a).","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"The gyrator (GY) port describes the electrical current and torque relationship, with the constant k representing its value.","category":"page"},{"location":"examples/electrical_dc_motor.html#Bond-graph-toolkit","page":"DC Motor","title":"Bond-graph toolkit","text":"","category":"section"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"In this example we are going to first build and simulate the bond graph model for the DC motor. Then we are going to use the DC motor differential equations obtained based Newton's 2nd law and Kirchhoff's voltage law to compare the results.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Firstly, we need to import the bond-graph toolkit module to model the system and the DifferentialEquations.jl to solve the resultant ODE. Also, we import the independent variable t from the bond-graph toolkit to define a custom forcing term.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"using BondGraph\nusing BondGraph: t, D\nusing DifferentialEquations\nusing ModelingToolkit\nusing Plots\nusing Symbolics.Latexify","category":"page"},{"location":"examples/electrical_dc_motor.html#Building-the-model","page":"DC Motor","title":"Building the model","text":"","category":"section"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Before defining a system, we need to define the single port elements of the system. Then, we define the electrical inductance (L), resitance (R) and the source of effort (V, voltage applied), elements as follows:","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"@named L = Mass(m=0.5)        # (H) Electric inductance\n@named R = Damper(c = 1.0)    # (Ohm) Electric resistance\n@named V = Se(12.0)           # (V) Voltage","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"For the mechanical part we define the shaft moment of inertia (J), viscous friction (c) and the source of effort (τ) as follows:","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"@named J = Mass(m = 0.01)     # (kg⋅m^2) Shaft moment of inertia\n@named c = Damper(c = 0.1)    # (N⋅m⋅s) Shaft viscous friction\n@named τ = Se(1.0)            # (N⋅m) Applied torque on the shaft","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Finally the current-torque constant is defined as:","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"g = 0.01    # DC motor torque constant","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"We build the system by simply passing the one-port elements to the 1-junction function as arguments for the mechanical and electrical part, respectively.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"@named jm = Junction1(τ, [-1, c], [-1, J])    # Mechanical part\n@named je = Junction1(V, [-1, R], [-1, L])    # Electical part","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Then, we couple mechanical and electrical domains using the gyrator port.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"eqs = []\n@named gy = mGY(je, jm, g = g, coneqs = eqs)\n\n### Build the system","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"We build the system by first creating a ODESystem with mGY generated equations and setting the independent variable as t.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"@named mdl = ODESystem(eqs, t)","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Then, we need to add the subsystems to the model.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"mdl = compose(mdl, gy, je, jm)","category":"page"},{"location":"examples/electrical_dc_motor.html#Analysing-the-model","page":"DC Motor","title":"Analysing the model","text":"","category":"section"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"We can visualize the bond-graph connections by generating a graph plot of the model.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"generate_graph(mdl)","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"We can obtain the bond-graph equations using the code below.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"equations(expand_connections(mdl))","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"The equations of the model above were not simplified and represent the bond-graphs equations directly derived from the connections. Then, we simplify the DAE above and obtain the ODE. The simplified set of equations is required for using solve from DifferentialEquations.jl","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"@named sys = simplifysys(mdl)","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Print system states","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"states(sys)","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Print system parameters","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"parameters(sys)","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Print the system simplified equations","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"equations(sys)","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"By comparison, we can see that the equations above are the same as the canonical form of the harmonic oscillator presented at the beginning.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"We can generate LaTeX code from the equations","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"latexify(equations(sys))","category":"page"},{"location":"examples/electrical_dc_motor.html#Simulate-the-system","page":"DC Motor","title":"Simulate the system","text":"","category":"section"},{"location":"examples/electrical_dc_motor.html#Bond-graph-model","page":"DC Motor","title":"Bond graph model","text":"","category":"section"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Define the simulation time","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"tspan = (0, 10)","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Generate an ODEProblem as in the ModelingToolkit, passing the simulation interval.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"prob = ODEProblem(sys, [], tspan)","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Use the solve to simulate the system.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"sol = solve(prob)\nplot(sol, xlabel = \"Time\", ylabel = \"Amplitude\")","category":"page"},{"location":"examples/electrical_dc_motor.html#DC-motor-model","page":"DC Motor","title":"DC motor model","text":"","category":"section"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"First, we define the state variables of the DC motor system, which are the i, theta, and cdottheta. They represent the armature current, shaft angle, and shaft angular velocity, respectively.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"@variables i(t) = 0.0           # Armature current\n@variables θ(t) = 0.0           # Shaft angle\n@variables θ̇(t) = 0.0           # Shaft angular velocity","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Then, we define the DC motor system parameters.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Lᵥ = 0.5                      # (H) - Inductance\nRᵥ = 1.0                      # (Ohm) - Resistance\nUᵥ = 12.0                     # (V) - Voltage\n\nJᵥ = 0.01                     # (kg*m²) - Moment of inertia of the rotor\nbᵥ = 0.1                      # (N*m*s) - Motor viscous friction constant\nTᵥ = 1.0                      # (N*m) - Motor torque","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Define the differential equations that represent the governing equations of the system. They include the equation for shaft angular acceleration, armature current, and the derivative of the shaft angle.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"eqs_t = [\n    Jᵥ * D(θ̇) ~ Tᵥ + g * i - bᵥ * θ̇,   # Equation for shaft angular acceleration\n    Lᵥ * D(i) ~ -Rᵥ * i + Uᵥ - g * θ̇,   # Equation for armature current\n    D(θ) ~ θ̇                          # Equation for shaft angle derivative\n]","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Then, we use the equations defined above to create the ODESystem.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"@named sys_t = ODESystem(eqs_t, t)","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"We simplify the ODE using the structural_simplify function of the ModelingToolkit.jl library. This procedure is required for using solve from DifferentialEquations.jl","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"sys_t = structural_simplify(sys_t)","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Define the ODEproblem to simulate with the time span defined for the bond graph simulation.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"prob_t = ODEProblem(sys_t, [], tspan)","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Use the solve to simulate the system.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"sol_t = solve(prob_t, reltol = 1e-8, abstol = 1e-8);\nnothing #hide","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Plot the results","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"plot(sol_t.t, sol_t[θ̇], label = \"Angular Velocity\")\nplot!(sol_t.t, sol_t[i], label = \"Armature Current\")","category":"page"},{"location":"examples/electrical_dc_motor.html#Compare-models","page":"DC Motor","title":"Compare models","text":"","category":"section"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"We will graphically compare the results obtained from the bond graph representation and the direct simulation of the system using the governing differential equations.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Electrical domain","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"plot(sol.t, sol[je.L.power.f], label = \"Bond-graph\", ylabel = \"Current (A)\")\nplot!(sol_t.t, sol_t[i], label = \"Model\", xlabel = \"Time (s)\")","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"Mechanical domain","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"plot(sol.t, sol[jm.J.power.f], label = \"Bond-graph\", ylabel = \"Angular velocity (rad/s)\")\nplot!(sol_t.t, sol_t[θ̇], label = \"Model\", xlabel = \"Time (s)\")","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"As we can see, the simulation, based on the bond graph model, replicated the expected dynamics.","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"","category":"page"},{"location":"examples/electrical_dc_motor.html","page":"DC Motor","title":"DC Motor","text":"This page was generated using Literate.jl.","category":"page"},{"location":"getting_started.html#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started.html","page":"Getting Started","title":"Getting Started","text":"This section will guide you through the steps required to install the library and provide a simple example to help you get started.","category":"page"},{"location":"getting_started.html#install-guide","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started.html","page":"Getting Started","title":"Getting Started","text":"To use the Bond Graph Toolkit, you need to have Julia installed on your system. If you haven't installed Julia yet, follow the official Julia documentation for instructions specific to your operating system or go directly to the Julia Download page.","category":"page"},{"location":"getting_started.html","page":"Getting Started","title":"Getting Started","text":"Once Julia is installed, you can proceed with installing the Bond Graph toolkit by following these steps:","category":"page"},{"location":"getting_started.html","page":"Getting Started","title":"Getting Started","text":"Launch Julia by opening the Julia REPL or the Julia command-line interface.\nEnter the package manager by pressing the ] key. You should see the prompt change to pkg>.\nInside the package manager, type the following command to add the library:\npkg> add BondGraphToolkit.jl\nWait for Julia to download and install the library and its dependencies. This process may take a few moments depending on your internet connection and system performance.\nOnce the installation is complete, you can exit the package manager by pressing the backspace key or by typing Ctrl+C.","category":"page"},{"location":"getting_started.html","page":"Getting Started","title":"Getting Started","text":"Congratulations! You have successfully installed the library and are ready to start using it.","category":"page"},{"location":"getting_started.html","page":"Getting Started","title":"Getting Started","text":"TODO: add instalation latest version","category":"page"},{"location":"getting_started.html","page":"Getting Started","title":"Getting Started","text":"@quick-example","category":"page"},{"location":"getting_started.html#Index","page":"Getting Started","title":"Index","text":"","category":"section"},{"location":"getting_started.html","page":"Getting Started","title":"Getting Started","text":"Pages = [\"getting_started.md\"]\nDepth = 2","category":"page"},{"location":"index.html#Welcome-to-Bond-Graph-Toolkit-Documentation","page":"Home","title":"Welcome to Bond Graph Toolkit Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A bond graph toolkit for Julia.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The BondGraphToolkit.jl is a Julia library designed to simplify the modeling and simulation of bond graphs systems. It offers a user-friendly syntax where engineers, researchers, and enthusiasts can express and analyze complex dynamic systems effortlessly. Built on top of the ModelingToolkit.jl ecosystem, the BondGraphToolkit.jl seamlessly integrates with existing tools, making it easy to use and customize.","category":"page"},{"location":"index.html#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The key features of the package include:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Intuitive and Expressive Modeling Syntax: The package provides an intuitive and expressive syntax that simplifies modeling dynamic systems with bond graphs.\nWide Range of Bond Graph Components: It supports bond graph components and elements, including inertance, compliance, resistance, gyrators, transformers, and more.\nSimulation Capabilities with DifferentialEquations.jl and ModelingToolkit.jl: The package seamlessly integrates with DifferentialEquations.jl and ModelingToolkit.jl packages. Every bond graph component is an ODESystem.\nVisualize Bond Graph Systems: It offers a visualization tool that allows to generate visual representations of the bond graph created.\nCustomization and Modification: Users can define their specialized bond graph components with a user-friendly API and extend the package's capabilities.\nExtensible Architecture for Integration. Integrating with other libraries and frameworks like ModelingToolkit.jl is simple.","category":"page"},{"location":"index.html#Use-Cases","page":"Home","title":"Use Cases","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Control systems design and analysis.\nRobotics and mechatronics applications.\nElectrical and electronic circuit simulation.\nBiomedical systems modeling.\nChemical process simulation.","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To start using the Bond Graph Toolkit, you need to have Julia installed on your system. Follow the official Julia documentation for instructions on installing Julia.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Once Julia is installed, you can add the Bond Graph Toolkit to your project by running the following command in the Julia REPL or the Julia package manager:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"pkg> add BondGraphToolkit.jl","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"For more detailed installation instructions, including information about dependencies, please refer to the Installation.","category":"page"},{"location":"index.html#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"We recommend checking out the Getting Started to quickly get started with Bond Graph Toolkit. It will guide you through library installation and the modeling and simulation of a simple dynamic system. It provides step-by-step instructions and code examples to help you grasp the basics of using the library.","category":"page"},{"location":"index.html#Documentation-Sections","page":"Home","title":"Documentation Sections","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"TODO: Fix the links","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"User guide: Learn how to model different types of dynamic systems and perform various analyses using MyLibrary.\nExamples: Collection of classical examples of dynamic systems in the mechanical and electrical domains and multiphysics systems.\nLibrary - Public: Detailed documentation of all public functions provided by the Bond Graph Toolkit.\nLibrary - Internals: Detailed documentation of all internal functions and types used by the Bond Graph Toolkit.","category":"page"},{"location":"index.html#Library","page":"Home","title":"Library","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]","category":"page"},{"location":"index.html#main-index","page":"Home","title":"Index","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\"]","category":"page"},{"location":"citing.html#Citing-BondGraphToolkit","page":"Citing BondGraphToolkit","title":"Citing BondGraphToolkit","text":"","category":"section"},{"location":"citing.html","page":"Citing BondGraphToolkit","title":"Citing BondGraphToolkit","text":"If you find BondGraphToolkit.jl useful in your project, we kindly request that you cite the following paper:","category":"page"},{"location":"citing.html","page":"Citing BondGraphToolkit","title":"Citing BondGraphToolkit","text":"TODO: add the paper","category":"page"},{"location":"citing.html","page":"Citing BondGraphToolkit","title":"Citing BondGraphToolkit","text":"The article is available under Open Access here.","category":"page"}]
}
